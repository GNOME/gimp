/* gimp-ui-3.vapi generated by vapigen-0.48, do not modify. */

[CCode (cprefix = "Gimp", gir_namespace = "GimpUi", gir_version = "3.0", lower_case_cprefix = "gimp_")]
namespace Gimp {
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_aspect_preview_get_type ()")]
	public class AspectPreview : Gimp.Preview, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected AspectPreview ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public AspectPreview.from_drawable (Gimp.Drawable drawable);
		[NoAccessorMethod]
		public Gimp.Drawable drawable { owned get; construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_browser_get_type ()")]
	public class Browser : Gtk.Paned, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public Browser ();
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_left_vbox ();
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_right_vbox ();
		[Version (since = "3.0")]
		public void set_search_summary (string summary);
		[Version (since = "2.4")]
		public void set_widget (Gtk.Widget widget);
		[Version (since = "2.4")]
		public void show_message (string message);
		public virtual signal void search (string search_string, int search_type);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_brush_select_button_get_type ()")]
	public class BrushSelectButton : Gimp.SelectButton, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public BrushSelectButton (string title, string brush_name, double opacity, int spacing, Gimp.LayerMode paint_mode);
		[Version (since = "2.4")]
		public unowned string get_brush (double opacity, int spacing, Gimp.LayerMode paint_mode);
		[Version (since = "2.4")]
		public void set_brush (string brush_name, double opacity, int spacing, Gimp.LayerMode paint_mode);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string brush_name { owned get; set; }
		[NoAccessorMethod]
		public double brush_opacity { get; set; }
		[NoAccessorMethod]
		public int brush_paint_mode { get; set; }
		[NoAccessorMethod]
		public int brush_spacing { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string title { owned get; construct; }
		[Version (since = "2.4")]
		public virtual signal void brush_set (string brush_name, double opacity, int spacing, int paint_mode, int width, int height, [CCode (array_length = false)] uint8[] mask_data, bool dialog_closing);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_busy_box_get_type ()")]
	public class BusyBox : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10.4")]
		public BusyBox (string? message);
		[Version (since = "2.10.4")]
		public unowned string get_message ();
		[Version (since = "2.10.4")]
		public void set_message (string message);
		[Version (since = "2.10.4")]
		public string message { get; set construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_button_get_type ()")]
	public class Button : Gtk.Button, Atk.Implementor, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Button ();
		[HasEmitter]
		public virtual signal void extended_clicked (Gdk.ModifierType modifier_state);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_cell_renderer_color_get_type ()")]
	public class CellRendererColor : Gtk.CellRenderer {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		[Version (since = "2.2")]
		public CellRendererColor ();
		[NoAccessorMethod]
		public Gimp.RGB color { owned get; set; }
		[NoAccessorMethod]
		public int icon_size { get; set construct; }
		[NoAccessorMethod]
		public bool opaque { get; set construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_cell_renderer_toggle_get_type ()")]
	public class CellRendererToggle : Gtk.CellRendererToggle {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		[Version (since = "2.2")]
		public CellRendererToggle (string icon_name);
		[NoAccessorMethod]
		public string icon_name { owned get; set construct; }
		[NoAccessorMethod]
		public int icon_size { get; set construct; }
		[NoAccessorMethod]
		public bool override_background { get; set construct; }
		[HasEmitter]
		public virtual signal void clicked (string path, Gdk.ModifierType state);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_chain_button_get_type ()")]
	public class ChainButton : Gtk.Grid, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ChainButton (Gimp.ChainPosition position);
		public bool get_active ();
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_button ();
		[Version (since = "2.10.10")]
		public Gtk.IconSize get_icon_size ();
		public void set_active (bool active);
		[Version (since = "2.10.10")]
		public void set_icon_size (Gtk.IconSize size);
		[Version (since = "2.10.10")]
		public bool active { get; set construct; }
		[Version (since = "2.10.10")]
		public Gtk.IconSize icon_size { get; set construct; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public Gimp.ChainPosition position { get; construct; }
		public virtual signal void toggled ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_channel_combo_box_get_type ()")]
	public class ChannelComboBox : Gimp.IntComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.2")]
		public ChannelComboBox (owned Gimp.ItemConstraintFunc constraint);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_area_get_type ()")]
	public class ColorArea : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorArea (Gimp.RGB color, Gimp.ColorAreaType type, Gdk.ModifierType drag_mask);
		public void get_color (out unowned Gimp.RGB color);
		public bool has_alpha ();
		public void set_color (Gimp.RGB color);
		[Version (since = "2.10")]
		public void set_color_config (Gimp.ColorConfig config);
		public void set_draw_border (bool draw_border);
		[Version (since = "2.10.10")]
		public void set_out_of_gamut (bool out_of_gamut);
		public void set_type (Gimp.ColorAreaType type);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public Gimp.RGB color { owned get; set construct; }
		[NoAccessorMethod]
		public Gdk.ModifierType drag_mask { construct; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public bool draw_border { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public Gimp.ColorAreaType type { get; set construct; }
		public virtual signal void color_changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_button_get_type ()")]
	public class ColorButton : Gimp.Button, Atk.Implementor, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorButton (string title, int width, int height, Gimp.RGB color, Gimp.ColorAreaType type);
		[NoWrapper]
		public virtual GLib.Type get_action_type ();
		public void get_color (out unowned Gimp.RGB color);
		[Version (since = "2.10")]
		public unowned string get_title ();
		[Version (since = "2.10")]
		public unowned Gtk.UIManager get_ui_manager ();
		public bool get_update ();
		public bool has_alpha ();
		public void set_color (Gimp.RGB color);
		[Version (since = "2.10")]
		public void set_color_config (Gimp.ColorConfig config);
		[Version (since = "2.10")]
		public void set_title (string title);
		public void set_type (Gimp.ColorAreaType type);
		public void set_update (bool continuous);
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public int area_height { set construct; }
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public int area_width { set construct; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public Gimp.RGB color { owned get; set construct; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public Gimp.ColorConfig color_config { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public bool continuous_update { get; set construct; }
		[Version (since = "2.4")]
		public string title { get; set construct; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public Gimp.ColorAreaType type { get; set construct; }
		public virtual signal void color_changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_display_get_type ()")]
	public class ColorDisplay : GLib.Object, Gimp.ConfigInterface {
		[CCode (has_construct_function = false)]
		protected ColorDisplay ();
		[Version (since = "2.0")]
		public Gimp.ColorDisplay clone ();
		[Version (since = "2.0")]
		public virtual Gtk.Widget configure ();
		public void configure_reset ();
		[Version (since = "2.10")]
		public virtual void convert_buffer (Gegl.Buffer buffer, Gegl.Rectangle area);
		[Version (since = "2.4")]
		public unowned Gimp.ColorConfig get_config ();
		public bool get_enabled ();
		[Version (since = "2.4")]
		public unowned Gimp.ColorManaged get_managed ();
		[Version (since = "2.0")]
		public void load_state (Gimp.Parasite state);
		[Version (since = "2.0")]
		public Gimp.Parasite save_state ();
		public void set_enabled (bool enabled);
		[NoAccessorMethod]
		public Gimp.ColorConfig color_config { owned get; construct; }
		[NoAccessorMethod]
		public Gimp.ColorManaged color_managed { owned get; construct; }
		public bool enabled { get; set construct; }
		[HasEmitter]
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_display_stack_get_type ()")]
	public class ColorDisplayStack : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "2.0")]
		public ColorDisplayStack ();
		[Version (since = "2.0")]
		public void add (Gimp.ColorDisplay display);
		[Version (since = "2.0")]
		public Gimp.ColorDisplayStack clone ();
		[Version (since = "2.10")]
		public void convert_buffer (Gegl.Buffer buffer, Gegl.Rectangle area);
		[Version (since = "3.0")]
		public unowned GLib.List<Gimp.ColorDisplay> get_filters ();
		[Version (since = "2.0")]
		public void remove (Gimp.ColorDisplay display);
		[Version (since = "2.0")]
		public void reorder_down (Gimp.ColorDisplay display);
		[Version (since = "2.0")]
		public void reorder_up (Gimp.ColorDisplay display);
		public virtual signal void added (Gimp.ColorDisplay display, int position);
		[HasEmitter]
		public virtual signal void changed ();
		public virtual signal void removed (Gimp.ColorDisplay display);
		public virtual signal void reordered (Gimp.ColorDisplay display, int position);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_hex_entry_get_type ()")]
	public class ColorHexEntry : Gtk.Entry, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.2")]
		public ColorHexEntry ();
		[Version (since = "2.2")]
		public void get_color (out unowned Gimp.RGB color);
		[Version (since = "2.2")]
		public void set_color (Gimp.RGB color);
		public virtual signal void color_changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_notebook_get_type ()")]
	public class ColorNotebook : Gimp.ColorSelector, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected ColorNotebook ();
		[Version (since = "3.0")]
		public unowned Gimp.ColorSelector get_current_selector ();
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_notebook ();
		[Version (since = "3.0")]
		public unowned GLib.List<Gimp.ColorSelector> get_selectors ();
		public unowned Gtk.Widget set_has_page (GLib.Type page_type, bool has_page);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_profile_chooser_dialog_get_type ()")]
	public class ColorProfileChooserDialog : Gtk.FileChooserDialog, Atk.Implementor, Gtk.Buildable, Gtk.FileChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorProfileChooserDialog (string title, Gtk.Window parent, Gtk.FileChooserAction action);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_profile_combo_box_get_type ()")]
	public class ColorProfileComboBox : Gtk.ComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public ColorProfileComboBox (Gtk.Widget dialog, GLib.File history);
		[Version (since = "2.10")]
		public void add_file (GLib.File file, string label);
		[Version (since = "2.10")]
		public unowned GLib.File get_active_file ();
		[Version (since = "2.10")]
		public void set_active_file (GLib.File file, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public ColorProfileComboBox.with_model (Gtk.Widget dialog, Gtk.TreeModel model);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public Gtk.Dialog dialog { owned get; construct; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public Gimp.ColorProfileStore model { owned get; set; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_profile_store_get_type ()")]
	public class ColorProfileStore : Gtk.ListStore, Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable {
		[CCode (has_construct_function = false, type = "GtkListStore*")]
		[Version (since = "2.4")]
		public ColorProfileStore (GLib.File history);
		[Version (since = "2.10")]
		public void add_file (GLib.File file, string label);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public GLib.File history { owned get; construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_profile_view_get_type ()")]
	public class ColorProfileView : Gtk.TextView, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorProfileView ();
		public void set_error (string message);
		public void set_profile (Gimp.ColorProfile profile);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", has_type_id = false)]
	[Compact]
	public class ColorScale {
		public static unowned Gtk.Adjustment entry_new (Gtk.Grid grid, int column, int row, string text, int scale_width, int spinbutton_width, double value, double lower, double upper, double step_increment, double page_increment, uint digits, string tooltip, string help_id);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", has_type_id = false)]
	[Compact]
	public class ColorScales {
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", has_type_id = false)]
	[Compact]
	public class ColorSelect {
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_selection_get_type ()")]
	public class ColorSelection : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorSelection ();
		public void get_color (out unowned Gimp.RGB color);
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_notebook ();
		public void get_old_color (out unowned Gimp.RGB color);
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_right_vbox ();
		public bool get_show_alpha ();
		public void reset ();
		public void set_color (Gimp.RGB color);
		[Version (since = "2.4")]
		public void set_config (Gimp.ColorConfig config);
		public void set_old_color (Gimp.RGB color);
		public void set_show_alpha (bool show_alpha);
		public Gimp.ColorConfig config { set; }
		[HasEmitter]
		public virtual signal void color_changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_color_selector_get_type ()")]
	public class ColorSelector : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		public Gimp.ColorSelectorChannel channel;
		public weak Gimp.HSV hsv;
		public weak Gimp.RGB rgb;
		public bool show_alpha;
		public bool toggles_sensitive;
		public bool toggles_visible;
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ColorSelector (GLib.Type selector_type, Gimp.RGB rgb, Gimp.HSV hsv, Gimp.ColorSelectorChannel channel);
		public void emit_channel_changed ();
		public void emit_color_changed ();
		[Version (since = "2.10")]
		public void emit_model_visible_changed (Gimp.ColorSelectorModel model);
		[Version (since = "2.10")]
		public Gimp.ColorSelectorChannel get_channel ();
		[Version (since = "2.10")]
		public void get_color (out unowned Gimp.RGB rgb, out unowned Gimp.HSV hsv);
		[Version (since = "2.10")]
		public bool get_model_visible (Gimp.ColorSelectorModel model);
		[Version (since = "2.10")]
		public bool get_show_alpha ();
		[Version (since = "2.10")]
		public bool get_toggles_sensitive ();
		[Version (since = "2.10")]
		public bool get_toggles_visible ();
		public virtual void set_channel (Gimp.ColorSelectorChannel channel);
		public virtual void set_color (Gimp.RGB rgb, Gimp.HSV hsv);
		[Version (since = "2.4")]
		public virtual void set_config (Gimp.ColorConfig config);
		[Version (since = "2.10")]
		public virtual void set_model_visible (Gimp.ColorSelectorModel model, bool visible);
		public virtual void set_show_alpha (bool show_alpha);
		public virtual void set_toggles_sensitive (bool sensitive);
		public virtual void set_toggles_visible (bool visible);
		public virtual signal void channel_changed (Gimp.ColorSelectorChannel channel);
		public virtual signal void color_changed (Gimp.RGB rgb, Gimp.RGB hsv);
		public virtual signal void model_visible_changed (Gimp.ColorSelectorModel model, bool visible);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", has_type_id = false)]
	[Compact]
	public class Controller {
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_dialog_get_type ()")]
	public class Dialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Dialog (string title, string role, Gtk.Widget? parent, Gtk.DialogFlags flags, Gimp.HelpFunc help_func, string help_id, ...);
		public unowned Gtk.Widget add_button (string button_text, int response_id);
		public void add_buttons (...);
		public int run ();
		[Version (since = "3.0")]
		public void set_alternative_button_order_from_array ([CCode (array_length_cname = "n_buttons", array_length_pos = 0.5)] int[] order);
		[NoAccessorMethod]
		[Version (since = "2.2")]
		public void* help_func { get; construct; }
		[NoAccessorMethod]
		[Version (since = "2.2")]
		public string help_id { owned get; set construct; }
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public Gtk.Widget parent { construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_drawable_combo_box_get_type ()")]
	public class DrawableComboBox : Gimp.IntComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.2")]
		public DrawableComboBox (owned Gimp.ItemConstraintFunc? constraint);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_drawable_preview_get_type ()")]
	public class DrawablePreview : Gimp.ScrolledPreview, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected DrawablePreview ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public DrawablePreview.from_drawable (Gimp.Drawable drawable);
		[Version (since = "2.10")]
		public unowned Gimp.Drawable get_drawable ();
		public Gimp.Drawable drawable { get; construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_enum_combo_box_get_type ()")]
	public class EnumComboBox : Gimp.IntComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public EnumComboBox (GLib.Type enum_type);
		[Version (since = "2.10")]
		public void set_icon_prefix (string icon_prefix);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public EnumComboBox.with_model (Gimp.EnumStore enum_store);
		[NoAccessorMethod]
		public Gimp.EnumStore model { owned get; set; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_enum_label_get_type ()")]
	public class EnumLabel : Gtk.Label, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public EnumLabel (GLib.Type enum_type, int value);
		[Version (since = "2.4")]
		public void set_value (int value);
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public GLib.Type enum_type { get; construct; }
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public int enum_value { set construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_enum_store_get_type ()")]
	public class EnumStore : Gimp.IntStore, Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable {
		[CCode (has_construct_function = false, type = "GtkListStore*")]
		[Version (since = "2.4")]
		public EnumStore (GLib.Type enum_type);
		[Version (since = "2.10")]
		public void set_icon_prefix (string icon_prefix);
		[CCode (has_construct_function = false, type = "GtkListStore*")]
		[Version (since = "2.4")]
		public EnumStore.with_range (GLib.Type enum_type, int minimum, int maximum);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public GLib.Type enum_type { get; construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", has_type_id = false)]
	[Compact]
	public class FileEntry {
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_font_select_button_get_type ()")]
	public class FontSelectButton : Gimp.SelectButton, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public FontSelectButton (string title, string font_name);
		[Version (since = "2.4")]
		public unowned string get_font ();
		[Version (since = "2.4")]
		public void set_font (string font_name);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string font_name { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string title { owned get; construct; }
		[Version (since = "2.4")]
		public virtual signal void font_set (string font_name, bool dialog_closing);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_frame_get_type ()")]
	public class Frame : Gtk.Frame, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.2")]
		public Frame (string label);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_gradient_select_button_get_type ()")]
	public class GradientSelectButton : Gimp.SelectButton, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public GradientSelectButton (string title, string gradient_name);
		[Version (since = "2.4")]
		public unowned string get_gradient ();
		[Version (since = "2.4")]
		public void set_gradient (string gradient_name);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string gradient_name { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string title { owned get; construct; }
		[Version (since = "2.4")]
		public virtual signal void gradient_set (string gradient_name, int width, void* gradient_data, bool dialog_closing);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_hint_box_get_type ()")]
	public class HintBox : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HintBox (string hint);
		[NoAccessorMethod]
		public string hint { owned get; construct; }
		[NoAccessorMethod]
		public string icon_name { owned get; construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_image_combo_box_get_type ()")]
	public class ImageComboBox : Gimp.IntComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.2")]
		public ImageComboBox (owned Gimp.ImageConstraintFunc constraint);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_int_combo_box_get_type ()")]
	public class IntComboBox : Gtk.ComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.2")]
		public IntComboBox (string first_label, ...);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.2")]
		public IntComboBox.array (int n_values, string labels);
		[Version (since = "2.2")]
		public ulong connect (int value, owned GLib.Callback callback);
		[Version (since = "2.2")]
		public bool get_active (out int value);
		[Version (since = "2.10")]
		public bool get_active_user_data (out void* user_data);
		[Version (since = "2.10")]
		public unowned string get_label ();
		[Version (since = "2.10")]
		public Gimp.IntComboBoxLayout get_layout ();
		[Version (since = "2.2")]
		public bool set_active (int value);
		[Version (since = "2.10")]
		public bool set_active_by_user_data (void* user_data);
		[Version (since = "2.10")]
		public void set_label (string label);
		[Version (since = "2.10")]
		public void set_layout (Gimp.IntComboBoxLayout layout);
		[Version (since = "2.4")]
		public void set_sensitivity (owned Gimp.IntSensitivityFunc func);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public Pango.EllipsizeMode ellipsize { get; set; }
		[Version (since = "2.10")]
		public string label { get; set; }
		[Version (since = "2.10")]
		public Gimp.IntComboBoxLayout layout { get; set; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_int_store_get_type ()")]
	public class IntStore : Gtk.ListStore, Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable {
		[CCode (has_construct_function = false, type = "GtkListStore*")]
		[Version (since = "2.2")]
		public IntStore (string first_label, ...);
		[Version (since = "2.10")]
		public static bool lookup_by_user_data (Gtk.TreeModel model, void* user_data, out Gtk.TreeIter iter);
		[Version (since = "2.2")]
		public static bool lookup_by_value (Gtk.TreeModel model, int value, out Gtk.TreeIter iter);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public GLib.Type user_data_type { get; construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_layer_combo_box_get_type ()")]
	public class LayerComboBox : Gimp.IntComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.2")]
		public LayerComboBox (owned Gimp.ItemConstraintFunc constraint);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_memsize_entry_get_type ()")]
	public class MemsizeEntry : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MemsizeEntry (uint64 value, uint64 lower, uint64 upper);
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_spinbutton ();
		public uint64 get_value ();
		public void set_value (uint64 value);
		public virtual signal void value_changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_number_pair_entry_get_type ()")]
	public class NumberPairEntry : Gtk.Entry, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public NumberPairEntry (string separators, bool allow_simplification, double min_valid_value, double max_valid_value);
		[Version (since = "2.4")]
		public Gimp.AspectType get_aspect ();
		[Version (since = "2.4")]
		public unowned string? get_default_text ();
		[Version (since = "2.4")]
		public void get_default_values (out double left, out double right);
		[Version (since = "2.4")]
		public double get_ratio ();
		[Version (since = "2.4")]
		public bool get_user_override ();
		[Version (since = "2.4")]
		public void get_values (out double left, out double right);
		[Version (since = "2.4")]
		public void set_aspect (Gimp.AspectType aspect);
		[Version (since = "2.4")]
		public void set_default_text (string string);
		[Version (since = "2.4")]
		public void set_default_values (double left, double right);
		[Version (since = "2.4")]
		public void set_ratio (double ratio);
		[Version (since = "2.4")]
		public void set_user_override (bool user_override);
		[Version (since = "2.4")]
		public void set_values (double left, double right);
		[NoAccessorMethod]
		public bool allow_simplification { get; set; }
		public Gimp.AspectType aspect { get; set; }
		[NoAccessorMethod]
		public double default_left_number { get; set; }
		[NoAccessorMethod]
		public double default_right_number { get; set; }
		public string default_text { get; set; }
		[NoAccessorMethod]
		public double left_number { get; set; }
		[NoAccessorMethod]
		public double max_valid_value { get; set; }
		[NoAccessorMethod]
		public double min_valid_value { get; set; }
		public double ratio { get; set; }
		[NoAccessorMethod]
		public double right_number { get; set; }
		[NoAccessorMethod]
		public string separators { owned get; construct; }
		public bool user_override { get; set; }
		public virtual signal void numbers_changed ();
		public virtual signal void ratio_changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_offset_area_get_type ()")]
	public class OffsetArea : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public OffsetArea (int orig_width, int orig_height);
		public void set_offsets (int offset_x, int offset_y);
		[Version (since = "2.2")]
		public void set_pixbuf (Gdk.Pixbuf pixbuf);
		public void set_size (int width, int height);
		public virtual signal void offsets_changed (int offset_x, int offset_y);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_page_selector_get_type ()")]
	public class PageSelector : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public PageSelector ();
		[Version (since = "2.4")]
		public int get_n_pages ();
		[Version (since = "2.4")]
		public string? get_page_label (int page_no);
		[Version (since = "2.4")]
		public unowned Gdk.Pixbuf? get_page_thumbnail (int page_no);
		[CCode (array_length_pos = 0.1)]
		[Version (since = "2.4")]
		public unowned int[] get_selected_pages ();
		[Version (since = "2.4")]
		public string get_selected_range ();
		[Version (since = "2.4")]
		public Gimp.PageSelectorTarget get_target ();
		[Version (since = "2.4")]
		public bool page_is_selected (int page_no);
		[Version (since = "2.4")]
		public void select_all ();
		[Version (since = "2.4")]
		public void select_page (int page_no);
		[Version (since = "2.4")]
		public void select_range (string range);
		[Version (since = "2.4")]
		public void set_n_pages (int n_pages);
		[Version (since = "2.4")]
		public void set_page_label (int page_no, string label);
		[Version (since = "2.4")]
		public void set_page_thumbnail (int page_no, Gdk.Pixbuf thumbnail);
		[Version (since = "2.4")]
		public void set_target (Gimp.PageSelectorTarget target);
		[Version (since = "2.4")]
		public void unselect_all ();
		[Version (since = "2.4")]
		public void unselect_page (int page_no);
		[Version (since = "2.4")]
		public int n_pages { get; set; }
		[Version (since = "2.4")]
		public Gimp.PageSelectorTarget target { get; set; }
		[Version (since = "2.4")]
		public virtual signal void activate ();
		[Version (since = "2.4")]
		public virtual signal void selection_changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_palette_select_button_get_type ()")]
	public class PaletteSelectButton : Gimp.SelectButton, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public PaletteSelectButton (string title, string palette_name);
		[Version (since = "2.4")]
		public unowned string get_palette ();
		[Version (since = "2.4")]
		public void set_palette (string palette_name);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string palette_name { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string title { owned get; construct; }
		[Version (since = "2.4")]
		public virtual signal void palette_set (string palette_name, bool dialog_closing);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_path_editor_get_type ()")]
	public class PathEditor : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		public weak Gtk.Widget delete_button;
		public weak Gtk.ListStore dir_list;
		public weak Gtk.Widget down_button;
		public weak Gtk.Widget file_entry;
		public weak Gtk.Widget new_button;
		public int num_items;
		public weak Gtk.TreeSelection sel;
		public weak Gtk.TreePath sel_path;
		public weak Gtk.Widget up_button;
		public weak Gtk.Widget upper_hbox;
		public weak Gtk.TreeViewColumn writable_column;
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PathEditor (string title, string path);
		public bool get_dir_writable (string directory);
		public string get_path ();
		public string get_writable_path ();
		public void set_dir_writable (string directory, bool writable);
		public void set_path (string path);
		public void set_writable_path (string path);
		public virtual signal void path_changed ();
		public virtual signal void writable_changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_pattern_select_button_get_type ()")]
	public class PatternSelectButton : Gimp.SelectButton, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public PatternSelectButton (string title, string pattern_name);
		[Version (since = "2.4")]
		public unowned string get_pattern ();
		[Version (since = "2.4")]
		public void set_pattern (string pattern_name);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string pattern_name { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string title { owned get; construct; }
		[Version (since = "2.4")]
		public virtual signal void pattern_set (string pattern_name, int width, int height, int bpp, void* mask_data, bool dialog_closing);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_pick_button_get_type ()")]
	public class PickButton : Gtk.Button, Atk.Implementor, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PickButton ();
		public virtual signal void color_picked (Gimp.RGB color);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_preview_get_type ()")]
	public abstract class Preview : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected Preview ();
		[Version (since = "2.2")]
		public virtual void draw ();
		[Version (since = "2.2")]
		public virtual void draw_buffer ([CCode (array_length = false)] uint8[] buffer, int rowstride);
		[NoWrapper]
		public virtual void draw_thumb (Gimp.PreviewArea area, int width, int height);
		[Version (since = "2.4")]
		public unowned Gtk.Widget get_area ();
		public void get_bounds (out int xmin, out int ymin, out int xmax, out int ymax);
		[Version (since = "2.4")]
		public unowned Gtk.Widget get_controls ();
		[Version (since = "3.0")]
		public unowned Gdk.Cursor get_default_cursor ();
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_frame ();
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_grid ();
		public void get_offsets (out int xoff, out int yoff);
		[Version (since = "2.2")]
		public void get_position (out int x, out int y);
		[Version (since = "2.2")]
		public void get_size (out int width, out int height);
		[Version (since = "2.2")]
		public bool get_update ();
		[Version (since = "2.2")]
		public void invalidate ();
		[Version (since = "2.2")]
		public void set_bounds (int xmin, int ymin, int xmax, int ymax);
		[NoWrapper]
		public virtual void set_cursor ();
		[Version (since = "2.2")]
		public void set_default_cursor (Gdk.Cursor cursor);
		public void set_offsets (int xoff, int yoff);
		public void set_size (int width, int height);
		[Version (since = "2.2")]
		public void set_update (bool update);
		[Version (since = "2.4")]
		public virtual void transform (int src_x, int src_y, out int dest_x, out int dest_y);
		[Version (since = "2.4")]
		public virtual void untransform (int src_x, int src_y, out int dest_x, out int dest_y);
		public bool update { get; set construct; }
		public virtual signal void invalidated ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_preview_area_get_type ()")]
	public class PreviewArea : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public PreviewArea ();
		public void blend (int x, int y, int width, int height, Gimp.ImageType type, [CCode (array_length = false)] uint8[] buf1, int rowstride1, [CCode (array_length = false)] uint8[] buf2, int rowstride2, uint8 opacity);
		public void draw (int x, int y, int width, int height, Gimp.ImageType type, [CCode (array_length = false)] uint8[] buf, int rowstride);
		public void fill (int x, int y, int width, int height, uint8 red, uint8 green, uint8 blue);
		public void get_size (out int width, out int height);
		public void mask (int x, int y, int width, int height, Gimp.ImageType type, [CCode (array_length = false)] uint8[] buf1, int rowstride1, [CCode (array_length = false)] uint8[] buf2, int rowstride2, [CCode (array_length = false)] uint8[] mask, int rowstride_mask);
		[Version (since = "2.2")]
		public void menu_popup (Gdk.EventButton? event);
		[Version (since = "2.10")]
		public void set_color_config (Gimp.ColorConfig config);
		public void set_colormap ([CCode (array_length = false)] uint8[] colormap, int num_colors);
		[Version (since = "2.2")]
		public void set_max_size (int width, int height);
		[Version (since = "2.2")]
		public void set_offsets (int x, int y);
		[NoAccessorMethod]
		public Gimp.CheckSize check_size { get; set; }
		[NoAccessorMethod]
		public Gimp.CheckType check_type { get; set; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_proc_browser_dialog_get_type ()")]
	public class ProcBrowserDialog : Gimp.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public ProcBrowserDialog (string title, string role, [CCode (scope = "async")] Gimp.HelpFunc help_func, string help_id, ...);
		[Version (since = "2.4")]
		public string? get_selected ();
		public virtual signal void row_activated ();
		public virtual signal void selection_changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_procedure_dialog_get_type ()")]
	public class ProcedureDialog : Gimp.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ProcedureDialog (Gimp.Procedure procedure, Gimp.ProcedureConfig config, string title);
		public bool run ();
		[NoAccessorMethod]
		public Gimp.ProcedureConfig config { owned get; set construct; }
		[NoAccessorMethod]
		public Gimp.Procedure procedure { owned get; set; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_progress_bar_get_type ()")]
	public class ProgressBar : Gtk.ProgressBar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		public bool cancelable;
		public weak string progress_callback;
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.2")]
		public ProgressBar ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_ruler_get_type ()")]
	public class Ruler : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.8")]
		public Ruler (Gtk.Orientation orientation);
		[Version (since = "2.8")]
		public void add_track_widget (Gtk.Widget widget);
		[Version (since = "2.8")]
		public double get_position ();
		[Version (since = "2.8")]
		public void get_range (out double lower, out double upper, out double max_size);
		[Version (since = "2.8")]
		public unowned Gimp.Unit get_unit ();
		[Version (since = "2.8")]
		public void remove_track_widget (Gtk.Widget widget);
		[Version (since = "2.8")]
		public void set_position (double position);
		[Version (since = "2.8")]
		public void set_range (double lower, double upper, double max_size);
		[Version (since = "2.8")]
		public void set_unit (Gimp.Unit unit);
		[NoAccessorMethod]
		public double lower { get; set; }
		[NoAccessorMethod]
		public double max_size { get; set; }
		[NoAccessorMethod]
		public Gtk.Orientation orientation { get; set; }
		public double position { get; set; }
		public Gimp.Unit unit { get; set; }
		[NoAccessorMethod]
		public double upper { get; set; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_scrolled_preview_get_type ()")]
	public abstract class ScrolledPreview : Gimp.Preview, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected ScrolledPreview ();
		[Version (since = "2.4")]
		public void freeze ();
		public void get_adjustments (out unowned Gtk.Adjustment hadj, out unowned Gtk.Adjustment vadj);
		[Version (since = "2.4")]
		public void set_policy (Gtk.PolicyType hscrollbar_policy, Gtk.PolicyType vscrollbar_policy);
		[Version (since = "2.4")]
		public void set_position (int x, int y);
		[Version (since = "2.4")]
		public void thaw ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_select_button_get_type ()")]
	public class SelectButton : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		public weak string temp_callback;
		[CCode (has_construct_function = false)]
		protected SelectButton ();
		[Version (since = "2.4")]
		public void close_popup ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_size_entry_get_type ()")]
	public class SizeEntry : Gtk.Grid, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SizeEntry (int number_of_fields, Gimp.Unit unit, string unit_format, bool menu_show_pixels, bool menu_show_percent, bool show_refval, int spinbutton_width, Gimp.SizeEntryUpdatePolicy update_policy);
		public void add_field (Gtk.SpinButton value_spinbutton, Gtk.SpinButton refval_spinbutton);
		public unowned Gtk.Widget attach_label (string text, int row, int column, float alignment);
		public unowned Gtk.Widget get_help_widget (int field);
		public int get_n_fields ();
		public double get_refval (int field);
		public unowned Gimp.Unit get_unit ();
		public unowned Gtk.Widget get_unit_combo ();
		public Gimp.SizeEntryUpdatePolicy get_update_policy ();
		public double get_value (int field);
		public void grab_focus ();
		[Version (since = "2.4")]
		public void set_activates_default (bool setting);
		public void set_pixel_digits (int digits);
		public void set_refval (int field, double refval);
		public void set_refval_boundaries (int field, double lower, double upper);
		public void set_refval_digits (int field, int digits);
		public void set_resolution (int field, double resolution, bool keep_size);
		public void set_size (int field, double lower, double upper);
		public void set_unit (Gimp.Unit unit);
		public void set_value (int field, double value);
		public void set_value_boundaries (int field, double lower, double upper);
		[Version (since = "2.4")]
		public void show_unit_menu (bool show);
		public virtual signal void refval_changed ();
		public virtual signal void unit_changed ();
		public virtual signal void value_changed ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", has_type_id = false)]
	[Compact]
	public class SizeEntryField {
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_spin_button_get_type ()")]
	public class SpinButton : Gtk.SpinButton, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10.10")]
		public SpinButton (Gtk.Adjustment? adjustment, double climb_rate, uint digits);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10.10")]
		public SpinButton.with_range (double min, double max, double step);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_string_combo_box_get_type ()")]
	public class StringComboBox : Gtk.ComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public StringComboBox (Gtk.TreeModel model, int id_column, int label_column);
		[Version (since = "2.4")]
		public string get_active ();
		[Version (since = "2.4")]
		public bool set_active (string id);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public Pango.EllipsizeMode ellipsize { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public int id_column { get; construct; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public int label_column { get; construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_unit_combo_box_get_type ()")]
	public class UnitComboBox : Gtk.ComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public UnitComboBox ();
		public unowned Gimp.Unit get_active ();
		public void set_active (Gimp.Unit unit);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public UnitComboBox.with_model (Gimp.UnitStore model);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_unit_store_get_type ()")]
	public class UnitStore : GLib.Object, Gtk.TreeModel {
		[CCode (has_construct_function = false)]
		public UnitStore (int num_values);
		public bool get_has_percent ();
		public bool get_has_pixels ();
		public double get_nth_value (Gimp.Unit unit, int index);
		public void set_has_percent (bool has_percent);
		public void set_has_pixels (bool has_pixels);
		public void set_pixel_value (int index, double value);
		public void set_resolution (int index, double resolution);
		public bool has_percent { get; set; }
		public bool has_pixels { get; set; }
		[NoAccessorMethod]
		public string long_format { owned get; set; }
		[NoAccessorMethod]
		public int num_values { get; construct; }
		[NoAccessorMethod]
		public string short_format { owned get; set; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_vectors_combo_box_get_type ()")]
	public class VectorsComboBox : Gimp.IntComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public VectorsComboBox (owned Gimp.ItemConstraintFunc constraint);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_zoom_model_get_type ()")]
	public class ZoomModel : GLib.Object {
		[CCode (has_construct_function = false)]
		public ZoomModel ();
		public double get_factor ();
		public void get_fraction (out int numerator, out int denominator);
		public void set_range (double min, double max);
		public void zoom (Gimp.ZoomType zoom_type, double scale);
		public static double zoom_step (Gimp.ZoomType zoom_type, double scale, double delta);
		[NoAccessorMethod]
		public string fraction { owned get; }
		[NoAccessorMethod]
		public double maximum { get; set; }
		[NoAccessorMethod]
		public double minimum { get; set; }
		[NoAccessorMethod]
		public string percentage { owned get; }
		[NoAccessorMethod]
		public double value { get; set; }
		public virtual signal void zoomed (double old_factor, double new_factor);
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", type_id = "gimp_zoom_preview_get_type ()")]
	public class ZoomPreview : Gimp.ScrolledPreview, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected ZoomPreview ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public ZoomPreview.from_drawable (Gimp.Drawable drawable);
		[Version (since = "3.0")]
		public unowned Gimp.Drawable get_drawable ();
		[Version (since = "2.4")]
		public double get_factor ();
		[Version (since = "2.4")]
		public unowned Gimp.ZoomModel get_model ();
		[CCode (array_length = false)]
		[Version (since = "2.4")]
		public uint8[] get_source (out int width, out int height, out int bpp);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public ZoomPreview.with_model_from_drawable (Gimp.Drawable drawable, Gimp.ZoomModel model);
		public Gimp.Drawable drawable { get; construct; }
		[Version (since = "2.4")]
		public Gimp.ZoomModel model { get; construct; }
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_ASPECT_", type_id = "gimp_aspect_type_get_type ()")]
	public enum AspectType {
		SQUARE,
		PORTRAIT,
		LANDSCAPE
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_CHAIN_", type_id = "gimp_chain_position_get_type ()")]
	public enum ChainPosition {
		TOP,
		LEFT,
		BOTTOM,
		RIGHT
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_COLOR_AREA_", type_id = "gimp_color_area_type_get_type ()")]
	public enum ColorAreaType {
		FLAT,
		SMALL_CHECKS,
		LARGE_CHECKS
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_COLOR_SELECTOR_", type_id = "gimp_color_selector_channel_get_type ()")]
	public enum ColorSelectorChannel {
		HUE,
		SATURATION,
		VALUE,
		RED,
		GREEN,
		BLUE,
		ALPHA,
		LCH_LIGHTNESS,
		LCH_CHROMA,
		LCH_HUE
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_COLOR_SELECTOR_MODEL_", type_id = "gimp_color_selector_model_get_type ()")]
	[Version (since = "2.10")]
	public enum ColorSelectorModel {
		RGB,
		LCH,
		HSV
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_EXPORT_", has_type_id = false)]
	[Flags]
	public enum ExportCapabilities {
		CAN_HANDLE_RGB,
		CAN_HANDLE_GRAY,
		CAN_HANDLE_INDEXED,
		CAN_HANDLE_BITMAP,
		CAN_HANDLE_ALPHA,
		CAN_HANDLE_LAYERS,
		CAN_HANDLE_LAYERS_AS_ANIMATION,
		CAN_HANDLE_LAYER_MASKS,
		NEEDS_ALPHA,
		NEEDS_CROP
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_EXPORT_", has_type_id = false)]
	public enum ExportReturn {
		CANCEL,
		IGNORE,
		EXPORT
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_INT_COMBO_BOX_LAYOUT_", type_id = "gimp_int_combo_box_layout_get_type ()")]
	[Version (since = "2.10")]
	public enum IntComboBoxLayout {
		ICON_ONLY,
		ABBREVIATED,
		FULL
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_INT_STORE_", has_type_id = false)]
	public enum IntStoreColumns {
		VALUE,
		LABEL,
		ABBREV,
		ICON_NAME,
		PIXBUF,
		USER_DATA,
		NUM_COLUMNS
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_PAGE_SELECTOR_TARGET_", type_id = "gimp_page_selector_target_get_type ()")]
	public enum PageSelectorTarget {
		LAYERS,
		IMAGES
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_SIZE_ENTRY_UPDATE_", type_id = "gimp_size_entry_update_policy_get_type ()")]
	public enum SizeEntryUpdatePolicy {
		NONE,
		SIZE,
		RESOLUTION
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_ZOOM_", type_id = "gimp_zoom_type_get_type ()")]
	public enum ZoomType {
		IN,
		OUT
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", cprefix = "GIMP_WIDGETS_PARSE_")]
	public errordomain WidgetsError {
		[CCode (cname = "GIMP_WIDGETS_PARSE_ERROR")]
		WIDGETS_PARSE_ERROR;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libgimp/gimpui.h", has_target = false)]
	public delegate void HelpFunc (string help_id, void* help_data);
	[CCode (cheader_filename = "libgimp/gimpui.h", instance_pos = 1.9)]
	public delegate bool ImageConstraintFunc (Gimp.Image image);
	[CCode (cheader_filename = "libgimp/gimpui.h", instance_pos = 1.9)]
	public delegate bool IntSensitivityFunc (int value);
	[CCode (cheader_filename = "libgimp/gimpui.h", instance_pos = 2.9)]
	public delegate bool ItemConstraintFunc (Gimp.Image image, Gimp.Item item);
	[CCode (cheader_filename = "libgimp/gimpui.h", instance_pos = 2.9)]
	public delegate void QueryBooleanCallback (Gtk.Widget query_box, bool value);
	[CCode (cheader_filename = "libgimp/gimpui.h", instance_pos = 2.9)]
	public delegate void QueryDoubleCallback (Gtk.Widget query_box, double value);
	[CCode (cheader_filename = "libgimp/gimpui.h", instance_pos = 2.9)]
	public delegate void QueryIntCallback (Gtk.Widget query_box, int value);
	[CCode (cheader_filename = "libgimp/gimpui.h", instance_pos = 3.9)]
	public delegate void QuerySizeCallback (Gtk.Widget query_box, double size, Gimp.Unit unit);
	[CCode (cheader_filename = "libgimp/gimpui.h", instance_pos = 2.9)]
	public delegate void QueryStringCallback (Gtk.Widget query_box, string string);
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_COLOR_SELECTOR_BAR_SIZE")]
	public const int COLOR_SELECTOR_BAR_SIZE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_COLOR_SELECTOR_SIZE")]
	public const int COLOR_SELECTOR_SIZE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_APPLICATION_EXIT")]
	public const string ICON_APPLICATION_EXIT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_ASPECT_LANDSCAPE")]
	public const string ICON_ASPECT_LANDSCAPE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_ASPECT_PORTRAIT")]
	public const string ICON_ASPECT_PORTRAIT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_ATTACH")]
	public const string ICON_ATTACH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_BUSINESS_CARD")]
	public const string ICON_BUSINESS_CARD;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CAP_BUTT")]
	public const string ICON_CAP_BUTT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CAP_ROUND")]
	public const string ICON_CAP_ROUND;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CAP_SQUARE")]
	public const string ICON_CAP_SQUARE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CENTER")]
	public const string ICON_CENTER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CENTER_HORIZONTAL")]
	public const string ICON_CENTER_HORIZONTAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CENTER_VERTICAL")]
	public const string ICON_CENTER_VERTICAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHAIN_HORIZONTAL")]
	public const string ICON_CHAIN_HORIZONTAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHAIN_HORIZONTAL_BROKEN")]
	public const string ICON_CHAIN_HORIZONTAL_BROKEN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHAIN_VERTICAL")]
	public const string ICON_CHAIN_VERTICAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHAIN_VERTICAL_BROKEN")]
	public const string ICON_CHAIN_VERTICAL_BROKEN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHANNEL")]
	public const string ICON_CHANNEL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHANNEL_ALPHA")]
	public const string ICON_CHANNEL_ALPHA;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHANNEL_BLUE")]
	public const string ICON_CHANNEL_BLUE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHANNEL_GRAY")]
	public const string ICON_CHANNEL_GRAY;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHANNEL_GREEN")]
	public const string ICON_CHANNEL_GREEN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHANNEL_INDEXED")]
	public const string ICON_CHANNEL_INDEXED;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHANNEL_RED")]
	public const string ICON_CHANNEL_RED;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CHAR_PICKER")]
	public const string ICON_CHAR_PICKER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CLOSE")]
	public const string ICON_CLOSE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CLOSE_ALL")]
	public const string ICON_CLOSE_ALL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLORMAP")]
	public const string ICON_COLORMAP;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLORS_DEFAULT")]
	public const string ICON_COLORS_DEFAULT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLORS_SWAP")]
	public const string ICON_COLORS_SWAP;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLOR_PICKER_BLACK")]
	public const string ICON_COLOR_PICKER_BLACK;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLOR_PICKER_GRAY")]
	public const string ICON_COLOR_PICKER_GRAY;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLOR_PICKER_WHITE")]
	public const string ICON_COLOR_PICKER_WHITE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLOR_PICK_FROM_SCREEN")]
	public const string ICON_COLOR_PICK_FROM_SCREEN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLOR_SELECTOR_CMYK")]
	public const string ICON_COLOR_SELECTOR_CMYK;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLOR_SELECTOR_TRIANGLE")]
	public const string ICON_COLOR_SELECTOR_TRIANGLE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLOR_SELECTOR_WATER")]
	public const string ICON_COLOR_SELECTOR_WATER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLOR_SPACE_LINEAR")]
	public const string ICON_COLOR_SPACE_LINEAR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLOR_SPACE_NON_LINEAR")]
	public const string ICON_COLOR_SPACE_NON_LINEAR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_COLOR_SPACE_PERCEPTUAL")]
	public const string ICON_COLOR_SPACE_PERCEPTUAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CONTROLLER")]
	public const string ICON_CONTROLLER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CONTROLLER_KEYBOARD")]
	public const string ICON_CONTROLLER_KEYBOARD;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CONTROLLER_LINUX_INPUT")]
	public const string ICON_CONTROLLER_LINUX_INPUT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CONTROLLER_MIDI")]
	public const string ICON_CONTROLLER_MIDI;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CONTROLLER_WHEEL")]
	public const string ICON_CONTROLLER_WHEEL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CONVERT_GRAYSCALE")]
	public const string ICON_CONVERT_GRAYSCALE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CONVERT_INDEXED")]
	public const string ICON_CONVERT_INDEXED;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CONVERT_RGB")]
	public const string ICON_CONVERT_RGB;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CURSOR")]
	public const string ICON_CURSOR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CURVE_FREE")]
	public const string ICON_CURVE_FREE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_CURVE_SMOOTH")]
	public const string ICON_CURVE_SMOOTH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DETACH")]
	public const string ICON_DETACH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_CHANNELS")]
	public const string ICON_DIALOG_CHANNELS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_DASHBOARD")]
	public const string ICON_DIALOG_DASHBOARD;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_DEVICE_STATUS")]
	public const string ICON_DIALOG_DEVICE_STATUS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_ERROR")]
	public const string ICON_DIALOG_ERROR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_IMAGES")]
	public const string ICON_DIALOG_IMAGES;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_INFORMATION")]
	public const string ICON_DIALOG_INFORMATION;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_LAYERS")]
	public const string ICON_DIALOG_LAYERS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_NAVIGATION")]
	public const string ICON_DIALOG_NAVIGATION;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_PATHS")]
	public const string ICON_DIALOG_PATHS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_QUESTION")]
	public const string ICON_DIALOG_QUESTION;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_RESHOW_FILTER")]
	public const string ICON_DIALOG_RESHOW_FILTER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_TOOLS")]
	public const string ICON_DIALOG_TOOLS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_TOOL_OPTIONS")]
	public const string ICON_DIALOG_TOOL_OPTIONS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_UNDO_HISTORY")]
	public const string ICON_DIALOG_UNDO_HISTORY;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DIALOG_WARNING")]
	public const string ICON_DIALOG_WARNING;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DISPLAY")]
	public const string ICON_DISPLAY;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DISPLAY_FILTER")]
	public const string ICON_DISPLAY_FILTER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DISPLAY_FILTER_CLIP_WARNING")]
	public const string ICON_DISPLAY_FILTER_CLIP_WARNING;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DISPLAY_FILTER_COLORBLIND")]
	public const string ICON_DISPLAY_FILTER_COLORBLIND;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DISPLAY_FILTER_CONTRAST")]
	public const string ICON_DISPLAY_FILTER_CONTRAST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DISPLAY_FILTER_GAMMA")]
	public const string ICON_DISPLAY_FILTER_GAMMA;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DISPLAY_FILTER_LCMS")]
	public const string ICON_DISPLAY_FILTER_LCMS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DISPLAY_FILTER_PROOF")]
	public const string ICON_DISPLAY_FILTER_PROOF;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DOCUMENT_NEW")]
	public const string ICON_DOCUMENT_NEW;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DOCUMENT_OPEN")]
	public const string ICON_DOCUMENT_OPEN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DOCUMENT_OPEN_RECENT")]
	public const string ICON_DOCUMENT_OPEN_RECENT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DOCUMENT_PAGE_SETUP")]
	public const string ICON_DOCUMENT_PAGE_SETUP;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DOCUMENT_PRINT")]
	public const string ICON_DOCUMENT_PRINT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DOCUMENT_PRINT_RESOLUTION")]
	public const string ICON_DOCUMENT_PRINT_RESOLUTION;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DOCUMENT_PROPERTIES")]
	public const string ICON_DOCUMENT_PROPERTIES;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DOCUMENT_REVERT")]
	public const string ICON_DOCUMENT_REVERT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DOCUMENT_SAVE")]
	public const string ICON_DOCUMENT_SAVE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DOCUMENT_SAVE_AS")]
	public const string ICON_DOCUMENT_SAVE_AS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_DYNAMICS")]
	public const string ICON_DYNAMICS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT")]
	public const string ICON_EDIT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT_CLEAR")]
	public const string ICON_EDIT_CLEAR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT_COPY")]
	public const string ICON_EDIT_COPY;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT_CUT")]
	public const string ICON_EDIT_CUT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT_DELETE")]
	public const string ICON_EDIT_DELETE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT_FIND")]
	public const string ICON_EDIT_FIND;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT_PASTE")]
	public const string ICON_EDIT_PASTE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT_PASTE_AS_NEW")]
	public const string ICON_EDIT_PASTE_AS_NEW;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT_PASTE_INTO")]
	public const string ICON_EDIT_PASTE_INTO;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT_REDO")]
	public const string ICON_EDIT_REDO;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_EDIT_UNDO")]
	public const string ICON_EDIT_UNDO;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FILE_MANAGER")]
	public const string ICON_FILE_MANAGER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FILL_HORIZONTAL")]
	public const string ICON_FILL_HORIZONTAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FILL_VERTICAL")]
	public const string ICON_FILL_VERTICAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FOLDER_NEW")]
	public const string ICON_FOLDER_NEW;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FONT")]
	public const string ICON_FONT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_INDENT_LESS")]
	public const string ICON_FORMAT_INDENT_LESS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_INDENT_MORE")]
	public const string ICON_FORMAT_INDENT_MORE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_JUSTIFY_CENTER")]
	public const string ICON_FORMAT_JUSTIFY_CENTER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_JUSTIFY_FILL")]
	public const string ICON_FORMAT_JUSTIFY_FILL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_JUSTIFY_LEFT")]
	public const string ICON_FORMAT_JUSTIFY_LEFT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_JUSTIFY_RIGHT")]
	public const string ICON_FORMAT_JUSTIFY_RIGHT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_BOLD")]
	public const string ICON_FORMAT_TEXT_BOLD;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_DIRECTION_LTR")]
	public const string ICON_FORMAT_TEXT_DIRECTION_LTR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_DIRECTION_RTL")]
	public const string ICON_FORMAT_TEXT_DIRECTION_RTL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_DIRECTION_TTB_LTR")]
	public const string ICON_FORMAT_TEXT_DIRECTION_TTB_LTR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_DIRECTION_TTB_LTR_UPRIGHT")]
	public const string ICON_FORMAT_TEXT_DIRECTION_TTB_LTR_UPRIGHT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_DIRECTION_TTB_RTL")]
	public const string ICON_FORMAT_TEXT_DIRECTION_TTB_RTL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_DIRECTION_TTB_RTL_UPRIGHT")]
	public const string ICON_FORMAT_TEXT_DIRECTION_TTB_RTL_UPRIGHT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_ITALIC")]
	public const string ICON_FORMAT_TEXT_ITALIC;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_SPACING_LETTER")]
	public const string ICON_FORMAT_TEXT_SPACING_LETTER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_SPACING_LINE")]
	public const string ICON_FORMAT_TEXT_SPACING_LINE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_STRIKETHROUGH")]
	public const string ICON_FORMAT_TEXT_STRIKETHROUGH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FORMAT_TEXT_UNDERLINE")]
	public const string ICON_FORMAT_TEXT_UNDERLINE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_FRAME")]
	public const string ICON_FRAME;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GEGL")]
	public const string ICON_GEGL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GO_BOTTOM")]
	public const string ICON_GO_BOTTOM;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GO_DOWN")]
	public const string ICON_GO_DOWN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GO_FIRST")]
	public const string ICON_GO_FIRST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GO_HOME")]
	public const string ICON_GO_HOME;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GO_LAST")]
	public const string ICON_GO_LAST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GO_NEXT")]
	public const string ICON_GO_NEXT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GO_PREVIOUS")]
	public const string ICON_GO_PREVIOUS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GO_TOP")]
	public const string ICON_GO_TOP;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GO_UP")]
	public const string ICON_GO_UP;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_BILINEAR")]
	public const string ICON_GRADIENT_BILINEAR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_CONICAL_ASYMMETRIC")]
	public const string ICON_GRADIENT_CONICAL_ASYMMETRIC;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_CONICAL_SYMMETRIC")]
	public const string ICON_GRADIENT_CONICAL_SYMMETRIC;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_LINEAR")]
	public const string ICON_GRADIENT_LINEAR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_RADIAL")]
	public const string ICON_GRADIENT_RADIAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_SHAPEBURST_ANGULAR")]
	public const string ICON_GRADIENT_SHAPEBURST_ANGULAR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_SHAPEBURST_DIMPLED")]
	public const string ICON_GRADIENT_SHAPEBURST_DIMPLED;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_SHAPEBURST_SPHERICAL")]
	public const string ICON_GRADIENT_SHAPEBURST_SPHERICAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_SPIRAL_ANTICLOCKWISE")]
	public const string ICON_GRADIENT_SPIRAL_ANTICLOCKWISE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_SPIRAL_CLOCKWISE")]
	public const string ICON_GRADIENT_SPIRAL_CLOCKWISE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRADIENT_SQUARE")]
	public const string ICON_GRADIENT_SQUARE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRAVITY_EAST")]
	public const string ICON_GRAVITY_EAST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRAVITY_NORTH")]
	public const string ICON_GRAVITY_NORTH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRAVITY_NORTH_EAST")]
	public const string ICON_GRAVITY_NORTH_EAST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRAVITY_NORTH_WEST")]
	public const string ICON_GRAVITY_NORTH_WEST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRAVITY_SOUTH")]
	public const string ICON_GRAVITY_SOUTH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRAVITY_SOUTH_EAST")]
	public const string ICON_GRAVITY_SOUTH_EAST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRAVITY_SOUTH_WEST")]
	public const string ICON_GRAVITY_SOUTH_WEST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRAVITY_WEST")]
	public const string ICON_GRAVITY_WEST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_GRID")]
	public const string ICON_GRID;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_HELP")]
	public const string ICON_HELP;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_HELP_ABOUT")]
	public const string ICON_HELP_ABOUT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_HELP_USER_MANUAL")]
	public const string ICON_HELP_USER_MANUAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_HISTOGRAM")]
	public const string ICON_HISTOGRAM;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_HISTOGRAM_LINEAR")]
	public const string ICON_HISTOGRAM_LINEAR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_HISTOGRAM_LOGARITHMIC")]
	public const string ICON_HISTOGRAM_LOGARITHMIC;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_IMAGE")]
	public const string ICON_IMAGE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_IMAGE_OPEN")]
	public const string ICON_IMAGE_OPEN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_IMAGE_RELOAD")]
	public const string ICON_IMAGE_RELOAD;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_INPUT_DEVICE")]
	public const string ICON_INPUT_DEVICE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_INVERT")]
	public const string ICON_INVERT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_JOIN_BEVEL")]
	public const string ICON_JOIN_BEVEL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_JOIN_MITER")]
	public const string ICON_JOIN_MITER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_JOIN_ROUND")]
	public const string ICON_JOIN_ROUND;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LAYER")]
	public const string ICON_LAYER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LAYER_ANCHOR")]
	public const string ICON_LAYER_ANCHOR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LAYER_FLOATING_SELECTION")]
	public const string ICON_LAYER_FLOATING_SELECTION;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LAYER_MASK")]
	public const string ICON_LAYER_MASK;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LAYER_MERGE_DOWN")]
	public const string ICON_LAYER_MERGE_DOWN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LAYER_TEXT_LAYER")]
	public const string ICON_LAYER_TEXT_LAYER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LAYER_TO_IMAGESIZE")]
	public const string ICON_LAYER_TO_IMAGESIZE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LINKED")]
	public const string ICON_LINKED;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LIST")]
	public const string ICON_LIST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LIST_ADD")]
	public const string ICON_LIST_ADD;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_LIST_REMOVE")]
	public const string ICON_LIST_REMOVE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_MARKER")]
	public const string ICON_MARKER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_MENU_LEFT")]
	public const string ICON_MENU_LEFT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_MENU_RIGHT")]
	public const string ICON_MENU_RIGHT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_OBJECT_DUPLICATE")]
	public const string ICON_OBJECT_DUPLICATE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_OBJECT_FLIP_HORIZONTAL")]
	public const string ICON_OBJECT_FLIP_HORIZONTAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_OBJECT_FLIP_VERTICAL")]
	public const string ICON_OBJECT_FLIP_VERTICAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_OBJECT_RESIZE")]
	public const string ICON_OBJECT_RESIZE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_OBJECT_ROTATE_180")]
	public const string ICON_OBJECT_ROTATE_180;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_OBJECT_ROTATE_270")]
	public const string ICON_OBJECT_ROTATE_270;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_OBJECT_ROTATE_90")]
	public const string ICON_OBJECT_ROTATE_90;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_OBJECT_SCALE")]
	public const string ICON_OBJECT_SCALE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PALETTE")]
	public const string ICON_PALETTE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PATH")]
	public const string ICON_PATH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PATH_STROKE")]
	public const string ICON_PATH_STROKE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PATTERN")]
	public const string ICON_PATTERN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PIVOT_CENTER")]
	public const string ICON_PIVOT_CENTER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PIVOT_EAST")]
	public const string ICON_PIVOT_EAST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PIVOT_NORTH")]
	public const string ICON_PIVOT_NORTH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PIVOT_NORTH_EAST")]
	public const string ICON_PIVOT_NORTH_EAST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PIVOT_NORTH_WEST")]
	public const string ICON_PIVOT_NORTH_WEST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PIVOT_SOUTH")]
	public const string ICON_PIVOT_SOUTH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PIVOT_SOUTH_EAST")]
	public const string ICON_PIVOT_SOUTH_EAST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PIVOT_SOUTH_WEST")]
	public const string ICON_PIVOT_SOUTH_WEST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PIVOT_WEST")]
	public const string ICON_PIVOT_WEST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PLUGIN")]
	public const string ICON_PLUGIN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PREFERENCES_SYSTEM")]
	public const string ICON_PREFERENCES_SYSTEM;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_PROCESS_STOP")]
	public const string ICON_PROCESS_STOP;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_QUICK_MASK_OFF")]
	public const string ICON_QUICK_MASK_OFF;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_QUICK_MASK_ON")]
	public const string ICON_QUICK_MASK_ON;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_RECORD")]
	public const string ICON_RECORD;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_RESET")]
	public const string ICON_RESET;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SAMPLE_POINT")]
	public const string ICON_SAMPLE_POINT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION")]
	public const string ICON_SELECTION;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_ADD")]
	public const string ICON_SELECTION_ADD;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_ALL")]
	public const string ICON_SELECTION_ALL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_BORDER")]
	public const string ICON_SELECTION_BORDER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_GROW")]
	public const string ICON_SELECTION_GROW;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_INTERSECT")]
	public const string ICON_SELECTION_INTERSECT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_NONE")]
	public const string ICON_SELECTION_NONE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_REPLACE")]
	public const string ICON_SELECTION_REPLACE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_SHRINK")]
	public const string ICON_SELECTION_SHRINK;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_STROKE")]
	public const string ICON_SELECTION_STROKE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_SUBTRACT")]
	public const string ICON_SELECTION_SUBTRACT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_TO_CHANNEL")]
	public const string ICON_SELECTION_TO_CHANNEL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SELECTION_TO_PATH")]
	public const string ICON_SELECTION_TO_PATH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SHAPE_CIRCLE")]
	public const string ICON_SHAPE_CIRCLE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SHAPE_DIAMOND")]
	public const string ICON_SHAPE_DIAMOND;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SHAPE_SQUARE")]
	public const string ICON_SHAPE_SQUARE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SHRED")]
	public const string ICON_SHRED;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SMARTPHONE")]
	public const string ICON_SMARTPHONE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SYMMETRY")]
	public const string ICON_SYMMETRY;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_SYSTEM_RUN")]
	public const string ICON_SYSTEM_RUN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TEMPLATE")]
	public const string ICON_TEMPLATE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TEXTURE")]
	public const string ICON_TEXTURE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_AIRBRUSH")]
	public const string ICON_TOOL_AIRBRUSH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_ALIGN")]
	public const string ICON_TOOL_ALIGN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_BLUR")]
	public const string ICON_TOOL_BLUR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_BRIGHTNESS_CONTRAST")]
	public const string ICON_TOOL_BRIGHTNESS_CONTRAST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_BUCKET_FILL")]
	public const string ICON_TOOL_BUCKET_FILL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_BY_COLOR_SELECT")]
	public const string ICON_TOOL_BY_COLOR_SELECT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_CAGE")]
	public const string ICON_TOOL_CAGE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_CLONE")]
	public const string ICON_TOOL_CLONE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_COLORIZE")]
	public const string ICON_TOOL_COLORIZE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_COLOR_BALANCE")]
	public const string ICON_TOOL_COLOR_BALANCE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_COLOR_PICKER")]
	public const string ICON_TOOL_COLOR_PICKER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_COLOR_TEMPERATURE")]
	public const string ICON_TOOL_COLOR_TEMPERATURE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_CROP")]
	public const string ICON_TOOL_CROP;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_CURVES")]
	public const string ICON_TOOL_CURVES;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_DESATURATE")]
	public const string ICON_TOOL_DESATURATE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_DODGE")]
	public const string ICON_TOOL_DODGE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_ELLIPSE_SELECT")]
	public const string ICON_TOOL_ELLIPSE_SELECT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_ERASER")]
	public const string ICON_TOOL_ERASER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_EXPOSURE")]
	public const string ICON_TOOL_EXPOSURE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_FLIP")]
	public const string ICON_TOOL_FLIP;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_FOREGROUND_SELECT")]
	public const string ICON_TOOL_FOREGROUND_SELECT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_FREE_SELECT")]
	public const string ICON_TOOL_FREE_SELECT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_FUZZY_SELECT")]
	public const string ICON_TOOL_FUZZY_SELECT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_GRADIENT")]
	public const string ICON_TOOL_GRADIENT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_HANDLE_TRANSFORM")]
	public const string ICON_TOOL_HANDLE_TRANSFORM;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_HEAL")]
	public const string ICON_TOOL_HEAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_HUE_SATURATION")]
	public const string ICON_TOOL_HUE_SATURATION;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_INK")]
	public const string ICON_TOOL_INK;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_ISCISSORS")]
	public const string ICON_TOOL_ISCISSORS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_LEVELS")]
	public const string ICON_TOOL_LEVELS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_MEASURE")]
	public const string ICON_TOOL_MEASURE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_MOVE")]
	public const string ICON_TOOL_MOVE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_MYPAINT_BRUSH")]
	public const string ICON_TOOL_MYPAINT_BRUSH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_N_POINT_DEFORMATION")]
	public const string ICON_TOOL_N_POINT_DEFORMATION;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_OFFSET")]
	public const string ICON_TOOL_OFFSET;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_PAINTBRUSH")]
	public const string ICON_TOOL_PAINTBRUSH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_PATH")]
	public const string ICON_TOOL_PATH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_PENCIL")]
	public const string ICON_TOOL_PENCIL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_PERSPECTIVE")]
	public const string ICON_TOOL_PERSPECTIVE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_PERSPECTIVE_CLONE")]
	public const string ICON_TOOL_PERSPECTIVE_CLONE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_POSTERIZE")]
	public const string ICON_TOOL_POSTERIZE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_PRESET")]
	public const string ICON_TOOL_PRESET;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_RECT_SELECT")]
	public const string ICON_TOOL_RECT_SELECT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_ROTATE")]
	public const string ICON_TOOL_ROTATE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_SCALE")]
	public const string ICON_TOOL_SCALE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_SEAMLESS_CLONE")]
	public const string ICON_TOOL_SEAMLESS_CLONE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_SHADOWS_HIGHLIGHTS")]
	public const string ICON_TOOL_SHADOWS_HIGHLIGHTS;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_SHEAR")]
	public const string ICON_TOOL_SHEAR;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_SMUDGE")]
	public const string ICON_TOOL_SMUDGE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_TEXT")]
	public const string ICON_TOOL_TEXT;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_THRESHOLD")]
	public const string ICON_TOOL_THRESHOLD;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_TRANSFORM_3D")]
	public const string ICON_TOOL_TRANSFORM_3D;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_UNIFIED_TRANSFORM")]
	public const string ICON_TOOL_UNIFIED_TRANSFORM;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_WARP")]
	public const string ICON_TOOL_WARP;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TOOL_ZOOM")]
	public const string ICON_TOOL_ZOOM;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TRANSFORM_3D_CAMERA")]
	public const string ICON_TRANSFORM_3D_CAMERA;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TRANSFORM_3D_MOVE")]
	public const string ICON_TRANSFORM_3D_MOVE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TRANSFORM_3D_ROTATE")]
	public const string ICON_TRANSFORM_3D_ROTATE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_TRANSPARENCY")]
	public const string ICON_TRANSPARENCY;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_VIDEO")]
	public const string ICON_VIDEO;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_VIEW_FULLSCREEN")]
	public const string ICON_VIEW_FULLSCREEN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_VIEW_REFRESH")]
	public const string ICON_VIEW_REFRESH;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_VISIBLE")]
	public const string ICON_VISIBLE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_WEB")]
	public const string ICON_WEB;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_WILBER")]
	public const string ICON_WILBER;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_WILBER_EEK")]
	public const string ICON_WILBER_EEK;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_WINDOW_CLOSE")]
	public const string ICON_WINDOW_CLOSE;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_WINDOW_MOVE_TO_SCREEN")]
	public const string ICON_WINDOW_MOVE_TO_SCREEN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_WINDOW_NEW")]
	public const string ICON_WINDOW_NEW;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_ZOOM_FIT_BEST")]
	public const string ICON_ZOOM_FIT_BEST;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_ZOOM_FOLLOW_WINDOW")]
	public const string ICON_ZOOM_FOLLOW_WINDOW;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_ZOOM_IN")]
	public const string ICON_ZOOM_IN;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_ZOOM_ORIGINAL")]
	public const string ICON_ZOOM_ORIGINAL;
	[CCode (cheader_filename = "libgimp/gimpui.h", cname = "GIMP_ICON_ZOOM_OUT")]
	public const string ICON_ZOOM_OUT;
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.6")]
	public static bool cairo_set_focus_line_pattern (Cairo.Context cr, Gtk.Widget widget);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.6")]
	public static Cairo.Surface cairo_surface_create_from_pixbuf (Gdk.Pixbuf pixbuf);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void context_help (Gtk.Widget widget);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static Gtk.Widget coordinates_new (Gimp.Unit unit, string unit_format, bool menu_show_pixels, bool menu_show_percent, int spinbutton_width, Gimp.SizeEntryUpdatePolicy update_policy, bool chainbutton_active, bool chain_constrains_ratio, string xlabel, double x, double xres, double lower_boundary_x, double upper_boundary_x, double xsize_0, double xsize_100, string ylabel, double y, double yres, double lower_boundary_y, double upper_boundary_y, double ysize_0, double ysize_100);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void double_adjustment_update (Gtk.Adjustment adjustment, void* data);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static Gtk.Widget enum_icon_box_new (GLib.Type enum_type, string icon_prefix, Gtk.IconSize icon_size, [CCode (delegate_target_pos = 4.33333, destroy_notify_pos = 4.66667)] owned GLib.Callback? callback, out unowned Gtk.Widget first_button);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static Gtk.Widget enum_icon_box_new_with_range (GLib.Type enum_type, int minimum, int maximum, string icon_prefix, Gtk.IconSize icon_size, [CCode (delegate_target_pos = 6.33333, destroy_notify_pos = 6.66667)] owned GLib.Callback? callback, out unowned Gtk.Widget first_button);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static void enum_icon_box_set_child_padding (Gtk.Widget icon_box, int xpad, int ypad);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget enum_radio_box_new (GLib.Type enum_type, [CCode (delegate_target_pos = 2.33333, destroy_notify_pos = 2.66667)] owned GLib.Callback? callback, out unowned Gtk.Widget first_button);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget enum_radio_box_new_with_range (GLib.Type enum_type, int minimum, int maximum, [CCode (delegate_target_pos = 4.33333, destroy_notify_pos = 4.66667)] owned GLib.Callback? callback, out unowned Gtk.Widget first_button);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget enum_radio_frame_new (GLib.Type enum_type, Gtk.Widget? label_widget, [CCode (delegate_target_pos = 3.33333, destroy_notify_pos = 3.66667)] owned GLib.Callback? callback, out unowned Gtk.Widget first_button);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget enum_radio_frame_new_with_range (GLib.Type enum_type, int minimum, int maximum, Gtk.Widget? label_widget, [CCode (delegate_target_pos = 5.33333, destroy_notify_pos = 5.66667)] owned GLib.Callback? callback, out unowned Gtk.Widget first_button);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.8")]
	public static unowned Gtk.Widget export_dialog_get_content_area (Gtk.Widget dialog);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.8")]
	public static Gtk.Widget export_dialog_new (string format_name, string role, string help_id);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static Gimp.ExportReturn export_image (Gimp.Image image, int n_drawables, Gimp.Drawable drawables, string format_name, Gimp.ExportCapabilities capabilities);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void float_adjustment_update (Gtk.Adjustment adjustment, void* data);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static unowned Gdk.Monitor get_monitor_at_pointer ();
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static unowned Gtk.Widget grid_attach_aligned (Gtk.Grid grid, int left, int top, string label_text, float xalign, float yalign, Gtk.Widget widget, int columns);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void help_connect (Gtk.Widget widget, [CCode (delegate_target_pos = 3.1, destroy_notify_pos = 3.2)] owned Gimp.HelpFunc help_func, string help_id);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.2")]
	public static GLib.Quark help_id_quark ();
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void help_set_help_data (Gtk.Widget widget, string tooltip, string help_id);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.6")]
	public static void help_set_help_data_with_markup (Gtk.Widget widget, string tooltip, string help_id);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void icons_init ();
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void icons_set_icon_theme (GLib.File path);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static void image_metadata_load_finish (Gimp.Image image, string mime_type, Gimp.Metadata metadata, Gimp.MetadataLoadFlags flags, bool interactive);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static Gimp.Metadata image_metadata_load_prepare (Gimp.Image image, string mime_type, GLib.File file) throws GLib.Error;
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static unowned Gimp.Image? image_metadata_load_thumbnail (GLib.File file) throws GLib.Error;
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static bool image_metadata_save_finish (Gimp.Image image, string mime_type, Gimp.Metadata metadata, Gimp.MetadataSaveFlags flags, GLib.File file) throws GLib.Error;
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void int_adjustment_update (Gtk.Adjustment adjustment, void* data);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void int_radio_group_set_active (Gtk.RadioButton radio_button, int item_data);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "3.0")]
	public static Gimp.ColorProfile? monitor_get_color_profile (Gdk.Monitor monitor);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget proc_view_new (string procedure_name);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_boolean_combo_box_new (GLib.Object config, string property_name, string true_text, string false_text);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_boolean_radio_frame_new (GLib.Object config, string property_name, string? title, string true_text, string false_text);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_check_button_new (GLib.Object config, string property_name, string label);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_color_area_new (GLib.Object config, string property_name, int width, int height, Gimp.ColorAreaType type);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static bool prop_coordinates_connect (GLib.Object config, string x_property_name, string y_property_name, string unit_property_name, Gtk.Widget sizeentry, Gtk.Widget chainbutton, double xresolution, double yresolution);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_coordinates_new (GLib.Object config, string x_property_name, string y_property_name, string unit_property_name, string unit_format, Gimp.SizeEntryUpdatePolicy update_policy, double xresolution, double yresolution, bool has_chainbutton);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_entry_new (GLib.Object config, string property_name, int max_len);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_enum_check_button_new (GLib.Object config, string property_name, string? label, int false_value, int true_value);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_enum_combo_box_new (GLib.Object config, string property_name, int minimum, int maximum);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static Gtk.Widget prop_enum_icon_box_new (GLib.Object config, string property_name, string icon_prefix, int minimum, int maximum);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_enum_label_new (GLib.Object config, string property_name);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_enum_radio_box_new (GLib.Object config, string property_name, int minimum, int maximum);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_enum_radio_frame_new (GLib.Object config, string property_name, string? title, int minimum, int maximum);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_expander_new (GLib.Object config, string property_name, string? label);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_file_chooser_button_new (GLib.Object config, string property_name, string title, Gtk.FileChooserAction action);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_file_chooser_button_new_with_dialog (GLib.Object config, string property_name, Gtk.Widget dialog);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_hscale_new (GLib.Object config, string property_name, double step_increment, double page_increment, int digits);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static Gtk.Widget prop_icon_image_new (GLib.Object config, string property_name, Gtk.IconSize icon_size);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_int_combo_box_new (GLib.Object config, string property_name, Gimp.IntStore store);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "3.0")]
	public static Gtk.Widget prop_int_radio_box_new (GLib.Object config, string property_name, Gimp.IntStore store);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "3.0")]
	public static Gtk.Widget prop_int_radio_frame_new (GLib.Object config, string property_name, string? title, Gimp.IntStore store);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_label_new (GLib.Object config, string property_name);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_memsize_entry_new (GLib.Object config, string property_name);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Adjustment prop_opacity_entry_new (GLib.Object config, string property_name, Gtk.Grid grid, int column, int row, string label);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static Gtk.Widget prop_path_editor_new (GLib.Object config, string path_property_name, string writable_property_name, string filechooser_title);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static Gtk.Widget prop_pointer_combo_box_new (GLib.Object config, string property_name, Gimp.IntStore store);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Adjustment prop_scale_entry_new (GLib.Object config, string property_name, Gtk.Grid grid, int column, int row, string? label, double step_increment, double page_increment, int digits, bool limit_scale, double lower_limit, double upper_limit);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_size_entry_new (GLib.Object config, string property_name, bool property_is_pixel, string unit_property_name, string unit_format, Gimp.SizeEntryUpdatePolicy update_policy, double resolution);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_spin_button_new (GLib.Object config, string property_name, double step_increment, double page_increment, int digits);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.Widget prop_string_combo_box_new (GLib.Object config, string property_name, Gtk.TreeModel model, int id_column, int label_column);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gtk.TextBuffer prop_text_buffer_new (GLib.Object config, string property_name, int max_len);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.8")]
	public static Gtk.Widget prop_unit_combo_box_new (GLib.Object config, string property_name);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static Gtk.Widget query_boolean_box (string title, Gtk.Widget parent, [CCode (scope = "async")] Gimp.HelpFunc help_func, string help_id, string icon_name, string message, string true_button, string false_button, GLib.Object object, string @signal, owned Gimp.QueryBooleanCallback callback);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static Gtk.Widget query_double_box (string title, Gtk.Widget parent, [CCode (scope = "async")] Gimp.HelpFunc help_func, string help_id, string message, double initial, double lower, double upper, int digits, GLib.Object object, string @signal, owned Gimp.QueryDoubleCallback callback);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static Gtk.Widget query_int_box (string title, Gtk.Widget parent, [CCode (scope = "async")] Gimp.HelpFunc help_func, string help_id, string message, int initial, int lower, int upper, GLib.Object object, string @signal, owned Gimp.QueryIntCallback callback);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static Gtk.Widget query_size_box (string title, Gtk.Widget parent, [CCode (scope = "async")] Gimp.HelpFunc help_func, string help_id, string message, double initial, double lower, double upper, int digits, Gimp.Unit unit, double resolution, bool dot_for_dot, GLib.Object object, string @signal, owned Gimp.QuerySizeCallback callback);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static Gtk.Widget query_string_box (string title, Gtk.Widget parent, [CCode (scope = "async")] Gimp.HelpFunc help_func, string help_id, string message, string initial, GLib.Object object, string @signal, owned Gimp.QueryStringCallback callback);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void radio_button_update (Gtk.Widget widget, void* data);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static Gtk.Widget random_seed_new (uint32 seed, bool random_seed);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.2")]
	public static bool scale_entry_get_logarithmic (Gtk.Adjustment adjustment);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static unowned Gtk.Adjustment scale_entry_new (Gtk.Grid grid, int column, int row, string text, int scale_width, int spinbutton_width, double value, double lower, double upper, double step_increment, double page_increment, uint digits, bool constrain, double unconstrained_lower, double unconstrained_upper, string tooltip, string help_id);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.2")]
	public static void scale_entry_set_logarithmic (Gtk.Adjustment adjustment, bool logarithmic);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void scale_entry_set_sensitive (Gtk.Adjustment adjustment, bool sensitive);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void scroll_adjustment_values (Gdk.EventScroll sevent, Gtk.Adjustment? hadj, Gtk.Adjustment? vadj, out double hvalue, out double vvalue);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void standard_help_func (string help_id, void* help_data);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void toggle_button_update (Gtk.Widget widget, void* data);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gdk.Window? ui_get_display_window (Gimp.Display display);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static Gdk.Window ui_get_progress_window ();
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void ui_init (string prog_name);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static void uint_adjustment_update (Gtk.Adjustment adjustment, void* data);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "3.0")]
	public static Gimp.ColorProfile? widget_get_color_profile (Gtk.Widget widget);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static Gimp.ColorTransform? widget_get_color_transform (Gtk.Widget widget, Gimp.ColorConfig config, Gimp.ColorProfile src_profile, Babl.Object src_format, Babl.Object dest_format);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static unowned Gdk.Monitor widget_get_monitor (Gtk.Widget widget);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.10")]
	public static void widget_track_monitor (Gtk.Widget widget, owned GLib.Callback monitor_changed_callback);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static void window_set_transient (Gtk.Window window);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	[Version (since = "2.4")]
	public static void window_set_transient_for_display (Gtk.Window window, Gimp.Display display);
	[CCode (cheader_filename = "libgimp/gimpui.h")]
	public static Gtk.Widget zoom_button_new (Gimp.ZoomModel model, Gimp.ZoomType zoom_type, Gtk.IconSize icon_size);
}
