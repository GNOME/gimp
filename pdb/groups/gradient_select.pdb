# GIMP - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub gradients_popup {
    $blurb = 'Invokes the Gimp gradients selection.';
    $help  = 'This procedure opens the gradient selection dialog.';

    &andy_pdb_misc('1998');

    @inargs = (
	{ name => 'gradient_callback', type => 'string', non_empty => 1,
	  desc => 'The callback PDB proc to call when gradient selection is
		   made' },
	{ name => 'popup_title', type => 'string',
	  desc => 'Title of the gradient selection dialog' },
	{ name => 'initial_gradient', type => 'string', null_ok => 1,
	  desc => 'The name of the gradient to set as the first selected' },
	{ name => 'sample_size', type => '1 <= int32 <= 10000', no_validate => 1,
	  desc => 'Size of the sample to return when the gradient is changed' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (sample_size < 1 || sample_size > 10000)
    sample_size = GIMP_GRADIENT_DEFAULT_SAMPLE_SIZE;

  if (gimp->no_interface ||
      ! gimp_pdb_lookup_procedure (gimp->pdb, gradient_callback) ||
      ! gimp_pdb_dialog_new (gimp, context, progress,
                             gimp_data_factory_get_container (gimp->gradient_factory),
                             popup_title, gradient_callback, initial_gradient,
                             "sample-size", sample_size,
                             NULL))
    success = FALSE;
}
CODE
    );
}

sub gradients_close_popup {
    $blurb = 'Close the gradient selection dialog.';
    $help  = 'This procedure closes an opened gradient selection dialog.';

    &andy_pdb_misc('1998');

    @inargs = (
	{ name => 'gradient_callback', type => 'string', non_empty => 1,
	  desc => 'The name of the callback registered for this pop-up' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->no_interface ||
      ! gimp_pdb_lookup_procedure (gimp->pdb, gradient_callback) ||
      ! gimp_pdb_dialog_close (gimp, gimp_data_factory_get_container (gimp->gradient_factory),
                               gradient_callback))
    success = FALSE;
}
CODE
    );
}

sub gradients_set_popup {
    $blurb = 'Sets the current gradient in a gradient selection dialog.';
    $help  = $blurb;

    &andy_pdb_misc('1998');

    @inargs = (
	{ name => 'gradient_callback', type => 'string', non_empty => 1,
	  desc => 'The name of the callback registered for this pop-up' },
	{ name => 'gradient_name', type => 'string',
	  desc => 'The name of the gradient to set as selected' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->no_interface ||
      ! gimp_pdb_lookup_procedure (gimp->pdb, gradient_callback) ||
      ! gimp_pdb_dialog_set (gimp, gimp_data_factory_get_container (gimp->gradient_factory),
                             gradient_callback, gradient_name,
                             NULL))
    success = FALSE;
}
CODE
    );
}


@headers = qw("core/gimp.h"
              "core/gimpdatafactory.h"
              "core/gimpgradient.h");

@procs = qw(gradients_popup
            gradients_close_popup
            gradients_set_popup);

%exports = (app => [@procs], lib => [@procs]);

$desc = 'Gradient UI';
$doc_title = 'gimpgradientselect';
$doc_short_desc = 'Functions providing a gradient selection dialog.';
$doc_long_desc = 'Functions providing a gradient selection dialog.';

1;
