# GIMP - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# "Perlized" from C source by Manish Singh <yosh@gimp.org>

sub fonts_popup {
    $blurb = 'Invokes the Gimp font selection.';
    $help  = 'This procedure opens the font selection dialog.';

    &neo_pdb_misc('2003');

    @inargs = (
	{ name => 'font_callback', type => 'string', non_empty => 1,
	  desc => 'The callback PDB proc to call when font selection is made' },
	{ name => 'popup_title', type => 'string',
	  desc => 'Title of the font selection dialog' },
	{ name => 'initial_font', type => 'string', null_ok => 1,
	  desc => 'The name of the font to set as the first selected' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->no_interface ||
      ! gimp_pdb_lookup_procedure (gimp->pdb, font_callback) ||
      ! gimp_data_factory_data_wait (gimp->font_factory)     ||
      ! gimp_pdb_dialog_new (gimp, context, progress,
                             gimp_data_factory_get_container (gimp->font_factory),
                             popup_title, font_callback, initial_font,
                             NULL))
    success = FALSE;
}
CODE
    );
}

sub fonts_close_popup {
    $blurb = 'Close the font selection dialog.';
    $help  = 'This procedure closes an opened font selection dialog.';

    &neo_pdb_misc('2003');

    @inargs = (
	{ name => 'font_callback', type => 'string', non_empty => 1,
	  desc => 'The name of the callback registered for this pop-up' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->no_interface ||
      ! gimp_pdb_lookup_procedure (gimp->pdb, font_callback) ||
      ! gimp_pdb_dialog_close (gimp,
                               gimp_data_factory_get_container (gimp->font_factory),
			       font_callback))
    success = FALSE;
}
CODE
    );
}

sub fonts_set_popup {
    $blurb = 'Sets the current font in a font selection dialog.';
    $help  = $blurb;

    &neo_pdb_misc('2003');

    @inargs = (
	{ name => 'font_callback', type => 'string', non_empty => 1,
	  desc => 'The name of the callback registered for this pop-up' },
	{ name => 'font_name', type => 'string',
	  desc => 'The name of the font to set as selected' }
    );

    %invoke = (
	code => <<'CODE'
{
  if (gimp->no_interface ||
      ! gimp_pdb_lookup_procedure (gimp->pdb, font_callback) ||
      ! gimp_data_factory_data_wait (gimp->font_factory)     ||
      ! gimp_pdb_dialog_set (gimp,
                             gimp_data_factory_get_container (gimp->font_factory),
			     font_callback, font_name,
                             NULL))
    success = FALSE;
}
CODE
    );
}


@headers = qw("core/gimp.h"
              "core/gimpdatafactory.h");

@procs = qw(fonts_popup
            fonts_close_popup
            fonts_set_popup);

%exports = (app => [@procs], lib => [@procs]);

$desc = 'Font UI';
$doc_title = 'gimpfontselect';
$doc_short_desc = 'Functions providing a font selection dialog.';
$doc_long_desc = 'Functions providing a font selection dialog.';

1;
